// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "CompanyService/openapi/gen/productservice/models"
)

// GetAPIV1ProductsProductIDReader is a Reader for the GetAPIV1ProductsProductID structure.
type GetAPIV1ProductsProductIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIV1ProductsProductIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAPIV1ProductsProductIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAPIV1ProductsProductIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetAPIV1ProductsProductIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAPIV1ProductsProductIDOK creates a GetAPIV1ProductsProductIDOK with default headers values
func NewGetAPIV1ProductsProductIDOK() *GetAPIV1ProductsProductIDOK {
	return &GetAPIV1ProductsProductIDOK{}
}

/*GetAPIV1ProductsProductIDOK handles this case with default header values.

Status 200
*/
type GetAPIV1ProductsProductIDOK struct {
	Payload *models.Product
}

func (o *GetAPIV1ProductsProductIDOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/products/{product_id}][%d] getApiV1ProductsProductIdOK  %+v", 200, o.Payload)
}

func (o *GetAPIV1ProductsProductIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Product)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1ProductsProductIDBadRequest creates a GetAPIV1ProductsProductIDBadRequest with default headers values
func NewGetAPIV1ProductsProductIDBadRequest() *GetAPIV1ProductsProductIDBadRequest {
	return &GetAPIV1ProductsProductIDBadRequest{}
}

/*GetAPIV1ProductsProductIDBadRequest handles this case with default header values.

Status 400
*/
type GetAPIV1ProductsProductIDBadRequest struct {
	Payload *models.Error
}

func (o *GetAPIV1ProductsProductIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/products/{product_id}][%d] getApiV1ProductsProductIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetAPIV1ProductsProductIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1ProductsProductIDInternalServerError creates a GetAPIV1ProductsProductIDInternalServerError with default headers values
func NewGetAPIV1ProductsProductIDInternalServerError() *GetAPIV1ProductsProductIDInternalServerError {
	return &GetAPIV1ProductsProductIDInternalServerError{}
}

/*GetAPIV1ProductsProductIDInternalServerError handles this case with default header values.

Status 500
*/
type GetAPIV1ProductsProductIDInternalServerError struct {
	Payload *models.Error
}

func (o *GetAPIV1ProductsProductIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/products/{product_id}][%d] getApiV1ProductsProductIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAPIV1ProductsProductIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
