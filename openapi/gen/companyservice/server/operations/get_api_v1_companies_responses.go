// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "CompanyService/openapi/gen/companyservice/models"
)

// GetAPIV1CompaniesOKCode is the HTTP code returned for type GetAPIV1CompaniesOK
const GetAPIV1CompaniesOKCode int = 200

/*GetAPIV1CompaniesOK Status 200

swagger:response getApiV1CompaniesOK
*/
type GetAPIV1CompaniesOK struct {

	/*
	  In: Body
	*/
	Payload *models.PageCompanies `json:"body,omitempty"`
}

// NewGetAPIV1CompaniesOK creates GetAPIV1CompaniesOK with default headers values
func NewGetAPIV1CompaniesOK() *GetAPIV1CompaniesOK {

	return &GetAPIV1CompaniesOK{}
}

// WithPayload adds the payload to the get Api v1 companies o k response
func (o *GetAPIV1CompaniesOK) WithPayload(payload *models.PageCompanies) *GetAPIV1CompaniesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Api v1 companies o k response
func (o *GetAPIV1CompaniesOK) SetPayload(payload *models.PageCompanies) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAPIV1CompaniesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAPIV1CompaniesBadRequestCode is the HTTP code returned for type GetAPIV1CompaniesBadRequest
const GetAPIV1CompaniesBadRequestCode int = 400

/*GetAPIV1CompaniesBadRequest Status 400

swagger:response getApiV1CompaniesBadRequest
*/
type GetAPIV1CompaniesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAPIV1CompaniesBadRequest creates GetAPIV1CompaniesBadRequest with default headers values
func NewGetAPIV1CompaniesBadRequest() *GetAPIV1CompaniesBadRequest {

	return &GetAPIV1CompaniesBadRequest{}
}

// WithPayload adds the payload to the get Api v1 companies bad request response
func (o *GetAPIV1CompaniesBadRequest) WithPayload(payload *models.Error) *GetAPIV1CompaniesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Api v1 companies bad request response
func (o *GetAPIV1CompaniesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAPIV1CompaniesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAPIV1CompaniesInternalServerErrorCode is the HTTP code returned for type GetAPIV1CompaniesInternalServerError
const GetAPIV1CompaniesInternalServerErrorCode int = 500

/*GetAPIV1CompaniesInternalServerError Status 500

swagger:response getApiV1CompaniesInternalServerError
*/
type GetAPIV1CompaniesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAPIV1CompaniesInternalServerError creates GetAPIV1CompaniesInternalServerError with default headers values
func NewGetAPIV1CompaniesInternalServerError() *GetAPIV1CompaniesInternalServerError {

	return &GetAPIV1CompaniesInternalServerError{}
}

// WithPayload adds the payload to the get Api v1 companies internal server error response
func (o *GetAPIV1CompaniesInternalServerError) WithPayload(payload *models.Error) *GetAPIV1CompaniesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get Api v1 companies internal server error response
func (o *GetAPIV1CompaniesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAPIV1CompaniesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
