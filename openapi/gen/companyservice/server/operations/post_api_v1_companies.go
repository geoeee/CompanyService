// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostAPIV1CompaniesHandlerFunc turns a function with the right signature into a post API v1 companies handler
type PostAPIV1CompaniesHandlerFunc func(PostAPIV1CompaniesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAPIV1CompaniesHandlerFunc) Handle(params PostAPIV1CompaniesParams) middleware.Responder {
	return fn(params)
}

// PostAPIV1CompaniesHandler interface for that can handle valid post API v1 companies params
type PostAPIV1CompaniesHandler interface {
	Handle(PostAPIV1CompaniesParams) middleware.Responder
}

// NewPostAPIV1Companies creates a new http.Handler for the post API v1 companies operation
func NewPostAPIV1Companies(ctx *middleware.Context, handler PostAPIV1CompaniesHandler) *PostAPIV1Companies {
	return &PostAPIV1Companies{Context: ctx, Handler: handler}
}

/*PostAPIV1Companies swagger:route POST /api/v1/companies postApiV1Companies

Create

*/
type PostAPIV1Companies struct {
	Context *middleware.Context
	Handler PostAPIV1CompaniesHandler
}

func (o *PostAPIV1Companies) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAPIV1CompaniesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
