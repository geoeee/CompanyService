// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "CompanyService/openapi/gen/companyservice/models"
)

// PostAPIV1CompaniesCreatedCode is the HTTP code returned for type PostAPIV1CompaniesCreated
const PostAPIV1CompaniesCreatedCode int = 201

/*PostAPIV1CompaniesCreated Status 201

swagger:response postApiV1CompaniesCreated
*/
type PostAPIV1CompaniesCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Company `json:"body,omitempty"`
}

// NewPostAPIV1CompaniesCreated creates PostAPIV1CompaniesCreated with default headers values
func NewPostAPIV1CompaniesCreated() *PostAPIV1CompaniesCreated {

	return &PostAPIV1CompaniesCreated{}
}

// WithPayload adds the payload to the post Api v1 companies created response
func (o *PostAPIV1CompaniesCreated) WithPayload(payload *models.Company) *PostAPIV1CompaniesCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Api v1 companies created response
func (o *PostAPIV1CompaniesCreated) SetPayload(payload *models.Company) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAPIV1CompaniesCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAPIV1CompaniesBadRequestCode is the HTTP code returned for type PostAPIV1CompaniesBadRequest
const PostAPIV1CompaniesBadRequestCode int = 400

/*PostAPIV1CompaniesBadRequest Status 400

swagger:response postApiV1CompaniesBadRequest
*/
type PostAPIV1CompaniesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAPIV1CompaniesBadRequest creates PostAPIV1CompaniesBadRequest with default headers values
func NewPostAPIV1CompaniesBadRequest() *PostAPIV1CompaniesBadRequest {

	return &PostAPIV1CompaniesBadRequest{}
}

// WithPayload adds the payload to the post Api v1 companies bad request response
func (o *PostAPIV1CompaniesBadRequest) WithPayload(payload *models.Error) *PostAPIV1CompaniesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Api v1 companies bad request response
func (o *PostAPIV1CompaniesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAPIV1CompaniesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAPIV1CompaniesInternalServerErrorCode is the HTTP code returned for type PostAPIV1CompaniesInternalServerError
const PostAPIV1CompaniesInternalServerErrorCode int = 500

/*PostAPIV1CompaniesInternalServerError Status 500

swagger:response postApiV1CompaniesInternalServerError
*/
type PostAPIV1CompaniesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAPIV1CompaniesInternalServerError creates PostAPIV1CompaniesInternalServerError with default headers values
func NewPostAPIV1CompaniesInternalServerError() *PostAPIV1CompaniesInternalServerError {

	return &PostAPIV1CompaniesInternalServerError{}
}

// WithPayload adds the payload to the post Api v1 companies internal server error response
func (o *PostAPIV1CompaniesInternalServerError) WithPayload(payload *models.Error) *PostAPIV1CompaniesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Api v1 companies internal server error response
func (o *PostAPIV1CompaniesInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAPIV1CompaniesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
